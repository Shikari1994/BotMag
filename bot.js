import { Bot, Keyboard, InputFile, InlineKeyboard } from "grammy";
import sqlite3 from 'sqlite3';
import { open } from 'sqlite';
import 'dotenv/config';
import exportToExcel from './exportToExcel.js'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é

const TOKEN = process.env.TOKEN;
const GROUP_ID = -1002301146731;
const bot = new Bot(TOKEN);
const ITEMS_PER_PAGE = 10;
const ITEMS_PER_PAGE_MARKUP = 8; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–ª—è –Ω–∞—Ü–µ–Ω–∫–∏

const dbPromise = open({
  filename: 'products.db',
  driver: sqlite3.Database,
});

const CATEGORIES = [
  "–ß–∞—Å—ã", "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã", "–ò–≥—Ä–æ–≤—ã–µ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏ –∏ –≥–µ–π–º–ø–∞–¥—ã",
  "–ù–∞—É—à–Ω–∏–∫–∏", "–ü–ª–∞–Ω—à–µ—Ç—ã", "–ù–æ—É—Ç–±—É–∫–∏", "–ö–æ–ª–æ–Ω–∫–∏",
  "–ö—Ä–∞—Å–æ—Ç–∞", "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã Apple", "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã Samsung"
];

const CATEGORY_MAPPING = {
  "–ß–∞—Å—ã": "–ß–∞—Å—ã",
  "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã": "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã",
  "–ò–≥—Ä–æ–≤—ã–µ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏ –∏ –≥–µ–π–º–ø–∞–¥—ã": "–ò–≥—Ä–æ–≤—ã–µ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏ –∏ –≥–µ–π–º–ø–∞–¥—ã",
  "–ù–∞—É—à–Ω–∏–∫–∏": "–ù–∞—É—à–Ω–∏–∫–∏",
  "–ü–ª–∞–Ω—à–µ—Ç—ã": "–ü–ª–∞–Ω—à–µ—Ç—ã",
  "–ù–æ—É—Ç–±—É–∫–∏": "–ù–æ—É—Ç–±—É–∫–∏",
  "–ö–æ–ª–æ–Ω–∫–∏": "–ö–æ–ª–æ–Ω–∫–∏",
  "–ö—Ä–∞—Å–æ—Ç–∞": "–ö—Ä–∞—Å–æ—Ç–∞",
  "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã Apple": "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã Apple",
  "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã Samsung": "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã Samsung"
};

let previousProducts = {};
let userStates = {};
const subscribers = new Set();
const MAX_MESSAGE_LENGTH = 4096;

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
const sendLongMessage = async (ctx, text, options = {}) => {
  for (let i = 0; i < text.length; i += MAX_MESSAGE_LENGTH) {
    const chunk = text.substring(i, i + MAX_MESSAGE_LENGTH);
    await ctx.reply(chunk, { ...options, parse_mode: "Markdown" });
  }
};

const sendMessage = (ctx, text, options = {}) => ctx.reply(text, options);
const sendMarkdown = (ctx, text) => sendLongMessage(ctx, text, { parse_mode: "Markdown" });

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.command("start", (ctx) => {
  const keyboard = new Keyboard()
    .text("–°–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑")
    .row(...CATEGORIES.slice(0, 3))
    .row(...CATEGORIES.slice(3, 6))
    .row(...CATEGORIES.slice(6, 9))
    .row(...CATEGORIES.slice(9, 12))
    .row("üìâ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω", "üîç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä")
    .row("üìÑ –í—ã–≥—Ä—É–∑–∏—Ç—å –≤ Excel", "üíº –ù–∞—Ü–µ–Ω–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä")
    .resized();

  sendMessage(ctx, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ñ—É–Ω–∫—Ü–∏—è–º–∏:", {
    reply_markup: { keyboard: keyboard.build() },
  });
});

// –ü–æ–¥–ø–∏—Å–∫–∞/–æ—Ç–ø–∏—Å–∫–∞
bot.command("subscribe", (ctx) => toggleSubscription(ctx.chat.id, true));
bot.command("unsubscribe", (ctx) => toggleSubscription(ctx.chat.id, false));

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on("message:text", async (ctx) => {
  const chatId = ctx.chat.id;
  const text = ctx.message.text;
  const state = userStates[chatId];

  if (state) {
    await handleUserState(chatId, text, state, ctx);
    return;
  }

  if (text === "–°–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑") {
    userStates[chatId] = { state: "searching_product_for_order" };
    sendMessage(ctx, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:");
    return;
  }

  if (!CATEGORIES.includes(text) && !["üìâ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω", "üîç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä", "üìÑ –í—ã–≥—Ä—É–∑–∏—Ç—å –≤ Excel", "üíº –ù–∞—Ü–µ–Ω–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä"].includes(text)) {
    sendMessage(ctx, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.");
    return;
  }

  const products = await fetchProducts();
  if (!products) return;

  const actions = {
    "üìâ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω": () => handlePriceChanges(chatId, products, ctx),
    "üìÑ –í—ã–≥—Ä—É–∑–∏—Ç—å –≤ Excel": () => exportToExcel(chatId, products, ctx), // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    "üîç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä": () => setUserState(chatId, "searching_product", ctx, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏:"),
    "üíº –ù–∞—Ü–µ–Ω–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä": () => setUserState(chatId, "entering_product_name", ctx, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞—Ü–µ–Ω–∫–∏:"),
  };

  if (actions[text]) {
    await actions[text]();
    return;
  }

  const productsMessage = formatProductsMessage(text, products);
  await sendMarkdown(ctx, productsMessage);
  previousProducts = products;
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
bot.on("callback_query:data", async (ctx) => {
  const chatId = ctx.chat.id;
  const data = ctx.callbackQuery.data;
  const state = userStates[chatId];

  if (data.startsWith("order_search_page_") || data.startsWith("markup_search_page_")) {
    await handlePagination(ctx, data, state);
    return;
  }

  if (data.startsWith("select_product_for_order_")) {
    await handleProductSelection(ctx, data, "selecting_payment");
    return;
  }

  if (data.startsWith("select_product_for_markup_")) {
    await handleProductSelection(ctx, data, "entering_markup_percentage");
    return;
  }

  if (data.startsWith("payment_")) {
    await handlePaymentSelection(ctx, data);
    return;
  }

  if (data.startsWith("shop_")) {
    await handleShopSelection(ctx, data);
    return;
  }

  await ctx.answerCallbackQuery();
});

// –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
const fetchProducts = async () => {
  const db = await dbPromise;
  const rows = await db.all('SELECT id, category, brand, model, name, price FROM products');
  const products = {};

  rows.forEach(row => {
    if (!products[row.category]) {
      products[row.category] = [];
    }
    products[row.category].push({
      id: row.id,
      brand: row.brand,
      model: row.model,
      name: row.name,
      price: row.price
    });
  });

  return products;
};

const formatProductsMessage = (category, products) => {
  const apiCategory = CATEGORY_MAPPING[category];
  const categoryProducts = products[apiCategory] || [];

  if (!categoryProducts.length) return `–¢–æ–≤–∞—Ä—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.`;

  let message = `*${apiCategory}*:\n`;
  const groupedByBrand = groupByBrand(categoryProducts);
  Object.entries(groupedByBrand).forEach(([brand, brandItems]) => {
    message += `_${brand}_\n`;
    message += brandItems.map(item => `- ${item.name}: ${item.price} ‚ÇΩ`).join("\n");
    message += "\n\n";
  });

  return message;
};

const groupByBrand = (items) => {
  return items.reduce((acc, item) => {
    if (!acc[item.brand]) {
      acc[item.brand] = [];
    }
    acc[item.brand].push(item);
    return acc;
  }, {});
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const setUserState = (chatId, state, ctx, prompt, data = {}) => {
  userStates[chatId] = { state, ...data };
  sendMessage(ctx, prompt);
};

const handleUserState = async (chatId, text, state, ctx) => {
  const actions = {
    searching_product: async () => await searchProduct(chatId, text, ctx),
    searching_product_for_order: async () => handleProductSearch(chatId, text, ctx, "searching_product_for_order"),
    entering_markup_percentage: () => calculateMarkup(chatId, text, state, ctx),
    entering_fio: () => handleFIO(chatId, text, ctx),
    entering_comment: () => handleComment(chatId, text, ctx),
    entering_product_name: async () => handleProductSearch(chatId, text, ctx, "entering_product_name"),
  };

  if (actions[state.state]) {
    await actions[state.state]();
    return;
  }

  delete userStates[chatId];
  sendMessage(ctx, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
};

const searchProduct = async (chatId, text, ctx) => {
  const products = await fetchProducts();
  if (!products) return;

  const results = Object.entries(products)
    .flatMap(([category, items]) =>
      items.filter(item => item.name.toLowerCase().includes(text.toLowerCase().trim()))
        .map(item => ({ category, ...item }))
    );

  if (!results.length) {
    sendMessage(ctx, `–¢–æ–≤–∞—Ä "${text}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    delete userStates[chatId];
    return;
  }

  let message = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n\n";
  results.forEach((result, index) => {
    message += `${index + 1}. *${result.name}*\n`;
    message += `- –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${result.category}\n`;
    message += `- –¶–µ–Ω–∞: ${result.price} ‚ÇΩ\n\n`;
  });

  await sendMarkdown(ctx, message);
  delete userStates[chatId];
};

const handleProductSearch = async (chatId, text, ctx, actionType) => {
  const products = await fetchProducts();
  if (!products) return;

  const results = Object.entries(products)
    .flatMap(([category, items]) =>
      items.filter(item => item.name.toLowerCase().includes(text.toLowerCase().trim()))
        .map(item => ({ category, ...item }))
    );

  if (!results.length) {
    sendMessage(ctx, `–¢–æ–≤–∞—Ä "${text}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    delete userStates[chatId];
    return;
  }

  const totalPages = Math.ceil(results.length / ITEMS_PER_PAGE_MARKUP);
  const currentPage = 0;

  const startIndex = currentPage * ITEMS_PER_PAGE_MARKUP;
  const endIndex = startIndex + ITEMS_PER_PAGE_MARKUP;
  const currentProducts = results.slice(startIndex, endIndex);

  const inlineKeyboard = new InlineKeyboard();

  currentProducts.forEach(result => {
    inlineKeyboard.text(result.name, `select_product_for_${actionType === "searching_product_for_order" ? "order" : "markup"}_${result.id}`).row();
  });

  if (totalPages > 1) {
    if (currentPage > 0) {
      inlineKeyboard.text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", `${actionType === "searching_product_for_order" ? "order" : "markup"}_search_page_${currentPage - 1}`);
    }
    if (currentPage < totalPages - 1) {
      inlineKeyboard.text("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", `${actionType === "searching_product_for_order" ? "order" : "markup"}_search_page_${currentPage + 1}`);
    }
  }

  sendMessage(ctx, `–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π (—Å—Ç—Ä. ${currentPage + 1}/${totalPages}):`, {
    reply_markup: inlineKeyboard,
  });

  userStates[chatId] = {
    state: actionType === "searching_product_for_order" ? "selecting_product_for_order" : "selecting_product_for_markup",
    searchResults: results,
    currentPage,
  };
};

const handlePagination = async (ctx, data, state) => {
  const chatId = ctx.chat.id;
  const page = parseInt(data.split('_').pop());
  const { searchResults } = state;

  const totalPages = Math.ceil(searchResults.length / ITEMS_PER_PAGE_MARKUP);
  const startIndex = page * ITEMS_PER_PAGE_MARKUP;
  const endIndex = startIndex + ITEMS_PER_PAGE_MARKUP;
  const currentProducts = searchResults.slice(startIndex, endIndex);

  const inlineKeyboard = new InlineKeyboard();

  currentProducts.forEach(result => {
    inlineKeyboard.text(result.name, `select_product_for_${data.startsWith("order") ? "order" : "markup"}_${result.id}`).row();
  });

  if (totalPages > 1) {
    if (page > 0) {
      inlineKeyboard.text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", `${data.startsWith("order") ? "order" : "markup"}_search_page_${page - 1}`);
    }
    if (page < totalPages - 1) {
      inlineKeyboard.text("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", `${data.startsWith("order") ? "order" : "markup"}_search_page_${page + 1}`);
    }
  }

  await ctx.editMessageText(`–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π (—Å—Ç—Ä. ${page + 1}/${totalPages}):`, {
    reply_markup: inlineKeyboard,
  });
  await ctx.answerCallbackQuery();
};

const handleProductSelection = async (ctx, data, nextState) => {
  const chatId = ctx.chat.id;
  const productId = data.split('_').pop();
  const { searchResults } = userStates[chatId];
  const selectedProduct = searchResults.find(item => item.id === parseInt(productId));

  if (selectedProduct) {
    userStates[chatId] = {
      state: nextState,
      selectedProduct,
    };

    if (nextState === "selecting_payment") {
      const inlineKeyboard = new InlineKeyboard()
        .text("–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞", "payment_–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞")
        .text("–ù–∞–ª–∏—á–Ω—ã–µ", "payment_–ù–∞–ª–∏—á–Ω—ã–µ")
        .text("–ö–∞—Ä—Ç–∞", "payment_–ö–∞—Ä—Ç–∞");

      sendMessage(ctx, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", {
        reply_markup: inlineKeyboard,
      });
    } else if (nextState === "entering_markup_percentage") {
      sendMessage(ctx, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞—Ü–µ–Ω–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10):");
    }
  }
};

const handlePaymentSelection = async (ctx, data) => {
  const chatId = ctx.chat.id;
  const paymentMethod = data.split('_').pop();
  userStates[chatId].paymentMethod = paymentMethod;
  userStates[chatId].state = "entering_fio";

  sendMessage(ctx, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:");
};

const handleShopSelection = async (ctx, data) => {
  const chatId = ctx.chat.id;
  const shop = data.split('_').pop();
  userStates[chatId].shop = shop;
  userStates[chatId].state = "entering_comment";

  sendMessage(ctx, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:");
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞—Ü–µ–Ω–∫–∏
const calculateMarkup = async (chatId, markupText, state, ctx) => {
  const markup = parseFloat(markupText);
  if (isNaN(markup) || markup < 0) {
    sendMessage(ctx, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –Ω–∞—Ü–µ–Ω–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10).");
    return;
  }

  const { selectedProduct } = state;
  const newPrice = selectedProduct.price * (1 + markup / 100);

  sendMessage(
    ctx,
    `–¢–æ–≤–∞—Ä: ${selectedProduct.name}\n` +
    `–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: ${selectedProduct.price} ‚ÇΩ\n` +
    `–ù–∞—Ü–µ–Ω–∫–∞: ${markup}%\n` +
    `–ù–æ–≤–∞—è —Ü–µ–Ω–∞: ${newPrice.toFixed(2)} ‚ÇΩ`
  );

  delete userStates[chatId];
};

const handleFIO = (chatId, text, ctx) => {
  userStates[chatId].fio = text;
  userStates[chatId].state = "selecting_shop";

  const inlineKeyboard = new InlineKeyboard()
    .text("–ú–∞–≥–∞–∑–∏–Ω 1", "shop_–ú–∞–≥–∞–∑–∏–Ω 1")
    .text("–ú–∞–≥–∞–∑–∏–Ω 2", "shop_–ú–∞–≥–∞–∑–∏–Ω 2");

  sendMessage(ctx, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω:", {
    reply_markup: inlineKeyboard,
  });
};

const handleComment = (chatId, text, ctx) => {
  userStates[chatId].comment = text;
  sendOrderToGroup(chatId, userStates[chatId], ctx);
};

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
const toggleSubscription = (chatId, isSubscribing) => {
  isSubscribing ? subscribers.add(chatId) : subscribers.delete(chatId);
  bot.api.sendMessage(chatId, isSubscribing ? "–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è." : "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.");
};

const handlePriceChanges = async (chatId, products, ctx) => {
  try {
    if (!previousProducts || Object.keys(previousProducts).length === 0) {
      previousProducts = products;
      sendMessage(ctx, "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –ø–æ–∫–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.");
      return;
    }

    let changesDetected = false;
    let message = "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω:\n\n";

    Object.entries(products).forEach(([category, items]) => {
      items.forEach(item => {
        const previousItem = previousProducts[category]?.find(prevItem => prevItem.name === item.name);
        if (previousItem && previousItem.price !== item.price) {
          changesDetected = true;
          message += `*${item.name}*:\n`;
          message += `- –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: ${previousItem.price} ‚ÇΩ\n`;
          message += `- –ù–æ–≤–∞—è —Ü–µ–Ω–∞: ${item.price} ‚ÇΩ\n\n`;
        }
      });
    });

    if (!changesDetected) {
      sendMessage(ctx, "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.");
    } else {
      const threadId = -1002301146731;
      await bot.api.sendMessage(GROUP_ID, message, {
        message_thread_id: threadId,
        parse_mode: "Markdown",
      });

      sendMarkdown(ctx, message);
    }

    previousProducts = products;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω:", error);
    sendMessage(ctx, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
};

const sendOrderToGroup = async (chatId, state, ctx) => {
  const { selectedProduct, paymentMethod, fio, shop, comment } = state;

  const orderMessage =
`1. –¢–æ–≤–∞—Ä: ${selectedProduct.name}
–¶–µ–Ω–∞: ${selectedProduct.price} ‚ÇΩ
–û–ø–ª–∞—Ç–∞: ${paymentMethod}
–§–ò–û: ${fio}
–ú–∞–≥–∞–∑–∏–Ω: ${shop}
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}`;

  try {
    await bot.api.sendMessage(GROUP_ID, orderMessage);
    sendMessage(ctx, "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É.");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ –≤ –≥—Ä—É–ø–ø—É:", error);
    sendMessage(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
  } finally {
    delete userStates[chatId];
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err) => {
  console.error("–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:", err);
});

bot.start();
