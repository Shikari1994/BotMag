import { Bot, Keyboard, InputFile, InlineKeyboard } from "grammy";
import { TOKEN, GROUP_ID, CATEGORIES, ITEMS_PER_PAGE_MARKUP } from './config.js';
import { fetchProducts } from './db.js';
import { sendMessage, sendMarkdown, formatProductsMessage } from './utils.js';
import * as XLSX from "xlsx";
import fs from "fs";

const bot = new Bot(TOKEN);



let previousProducts = {};
let userStates = {};
const subscribers = new Set();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.command("start", (ctx) => {
  const keyboard = new Keyboard()
    .text("–°–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑")
    .row(...CATEGORIES.slice(0, 3))
    .row(...CATEGORIES.slice(3, 6))
    .row(...CATEGORIES.slice(6, 9))
    .row(...CATEGORIES.slice(9, 12))
    .row("üìâ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω", "üîç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä")
    .row("üìÑ –í—ã–≥—Ä—É–∑–∏—Ç—å –≤ Excel", "üíº –ù–∞—Ü–µ–Ω–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä")
    .resized();

  sendMessage(ctx, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ñ—É–Ω–∫—Ü–∏—è–º–∏:", {
    reply_markup: { keyboard: keyboard.build() },
  });
});

// –ü–æ–¥–ø–∏—Å–∫–∞/–æ—Ç–ø–∏—Å–∫–∞
bot.command("subscribe", (ctx) => toggleSubscription(ctx.chat.id, true));
bot.command("unsubscribe", (ctx) => toggleSubscription(ctx.chat.id, false));

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on("message:text", async (ctx) => {
  const chatId = ctx.chat.id;
  const text = ctx.message.text;
  const state = userStates[chatId];

  if (state) {
    await handleUserState(chatId, text, state, ctx);
    return;
  }

  if (text === "–°–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑") {
    userStates[chatId] = { state: "searching_product_for_order" };
    sendMessage(ctx, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:");
    return;
  }

  if (!CATEGORIES.includes(text) && !["üìâ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω", "üîç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä", "üìÑ –í—ã–≥—Ä—É–∑–∏—Ç—å –≤ Excel", "üíº –ù–∞—Ü–µ–Ω–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä"].includes(text)) {
    sendMessage(ctx, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.");
    return;
  }

  const products = await fetchProducts();
  if (!products) return;

  const actions = {
    "üìâ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω": () => handlePriceChanges(chatId, products, ctx),
    "üìÑ –í—ã–≥—Ä—É–∑–∏—Ç—å –≤ Excel": () => exportToExcel(chatId, products, ctx),
    "üîç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä": () => setUserState(chatId, "searching_product", ctx, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏:"),
    "üíº –ù–∞—Ü–µ–Ω–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä": () => setUserState(chatId, "entering_product_name", ctx, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞—Ü–µ–Ω–∫–∏:"),
  };

  if (actions[text]) {
    await actions[text]();
    return;
  }

  const productsMessage = formatProductsMessage(text, products);
  await sendMarkdown(ctx, productsMessage);
  previousProducts = products;
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
bot.on("callback_query:data", async (ctx) => {
  const chatId = ctx.chat.id;
  const data = ctx.callbackQuery.data;
  const state = userStates[chatId];

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ
  if (data.startsWith("order_search_page_")) {
    const page = parseInt(data.replace("order_search_page_", ""));
    const { searchResults } = state;

    const totalPages = Math.ceil(searchResults.length / ITEMS_PER_PAGE_MARKUP);
    const startIndex = page * ITEMS_PER_PAGE_MARKUP;
    const endIndex = startIndex + ITEMS_PER_PAGE_MARKUP;
    const currentProducts = searchResults.slice(startIndex, endIndex);

    const inlineKeyboard = new InlineKeyboard();
    
    currentProducts.forEach(result => {
      inlineKeyboard.text(result.name, `select_product_for_order_${result.id}`).row(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID —Ç–æ–≤–∞—Ä–∞
    });

    if (totalPages > 1) {
      if (page > 0) {
        inlineKeyboard.text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", `order_search_page_${page - 1}`);
      }
      if (page < totalPages - 1) {
        inlineKeyboard.text("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", `order_search_page_${page + 1}`);
      }
    }

    await ctx.editMessageText(`–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π (—Å—Ç—Ä. ${page + 1}/${totalPages}):`, {
      reply_markup: inlineKeyboard,
    });
    await ctx.answerCallbackQuery();
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞
  if (data.startsWith("select_product_for_order_")) {
    const productId = data.replace("select_product_for_order_", "");
    const { searchResults } = userStates[chatId];
    const selectedProduct = searchResults.find(item => item.id === parseInt(productId)); // –ò—â–µ–º —Ç–æ–≤–∞—Ä –ø–æ ID

    if (selectedProduct) {
      userStates[chatId] = {
        state: "selecting_payment",
        selectedProduct,
      };

      const inlineKeyboard = new InlineKeyboard()
        .text("–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞", "payment_–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞")
        .text("–ù–∞–ª–∏—á–Ω—ã–µ", "payment_–ù–∞–ª–∏—á–Ω—ã–µ")
        .text("–ö–∞—Ä—Ç–∞", "payment_–ö–∞—Ä—Ç–∞");

      sendMessage(ctx, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", {
        reply_markup: inlineKeyboard,
      });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  if (data.startsWith("category_")) {
    const parts = data.split('_');
    const categoryName = parts[1];
    const page = parseInt(parts[2] || 0);
    
    const products = await fetchProducts();
    if (!products) return;

    const categoryKey = CATEGORY_MAPPING[categoryName];
    const categoryProducts = products[categoryKey] || [];
    
    if (!categoryProducts.length) {
      sendMessage(ctx, `–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${categoryName}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.`);
      return;
    }

    const totalPages = Math.ceil(categoryProducts.length / ITEMS_PER_PAGE);
    const startIndex = page * ITEMS_PER_PAGE;
    const endIndex = startIndex + ITEMS_PER_PAGE;
    const currentProducts = categoryProducts.slice(startIndex, endIndex);

    const inlineKeyboard = new InlineKeyboard();
    
    currentProducts.forEach(product => {
      inlineKeyboard.text(product.name, `order_product_${product.id}`).row(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID —Ç–æ–≤–∞—Ä–∞
    });

    if (page > 0) {
      inlineKeyboard.text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", `category_${categoryName}_${page - 1}`);
    }
    if (page < totalPages - 1) {
      inlineKeyboard.text("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", `category_${categoryName}_${page + 1}`);
    }

    await ctx.editMessageText(`–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${categoryName}" (—Å—Ç—Ä. ${page + 1}/${totalPages}):`, {
      reply_markup: inlineKeyboard,
    });
    await ctx.answerCallbackQuery();
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
  if (data.startsWith("payment_")) {
    const paymentMethod = data.replace("payment_", "");
    userStates[chatId].paymentMethod = paymentMethod;
    userStates[chatId].state = "entering_fio";

    sendMessage(ctx, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:");
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞
  if (data.startsWith("shop_")) {
    const shop = data.replace("shop_", "");
    userStates[chatId].shop = shop;
    userStates[chatId].state = "entering_comment";

    sendMessage(ctx, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:");
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –Ω–∞—Ü–µ–Ω–∫–∏
  if (data.startsWith("select_product_for_markup_")) {
    const productId = data.replace("select_product_for_markup_", "");
    const { searchResults } = userStates[chatId];
    const selectedProduct = searchResults.find(item => item.id === parseInt(productId)); // –ò—â–µ–º —Ç–æ–≤–∞—Ä –ø–æ ID

    if (selectedProduct) {
      userStates[chatId] = {
        state: "entering_markup_percentage",
        selectedProduct,
      };
      sendMessage(ctx, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞—Ü–µ–Ω–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10):");
    }
  }

  await ctx.answerCallbackQuery();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const setUserState = (chatId, state, ctx, prompt, data = {}) => {
  userStates[chatId] = { state, ...data };
  sendMessage(ctx, prompt);
};

const handleUserState = async (chatId, text, state, ctx) => {
  const actions = {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞ (–¥–ª—è –∫–Ω–æ–ø–∫–∏ "üîç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä")
    searching_product: async () => {
      const products = await fetchProducts();
      if (!products) return;

      const results = Object.entries(products)
        .flatMap(([category, items]) =>
          items.filter(item => item.name.toLowerCase().includes(text.toLowerCase().trim()))
            .map(item => ({ category, ...item }))
        );

      if (!results.length) {
        sendMessage(ctx, `–¢–æ–≤–∞—Ä "${text}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        delete userStates[chatId];
        return;
      }

      let message = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n\n";
      results.forEach((result, index) => {
        message += `${index + 1}. *${result.name}*\n`;
        message += `- –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${result.category}\n`;
        message += `- –¶–µ–Ω–∞: ${result.price} ‚ÇΩ\n\n`;
      });

      await sendMarkdown(ctx, message);
      delete userStates[chatId];
    },

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞ (–¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ "–°–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑")
    searching_product_for_order: async () => {
      const products = await fetchProducts();
      if (!products) return;

      const results = Object.entries(products)
        .flatMap(([category, items]) =>
          items.filter(item => item.name.toLowerCase().includes(text.toLowerCase().trim()))
            .map(item => ({ category, ...item }))
        );

      if (!results.length) {
        sendMessage(ctx, `–¢–æ–≤–∞—Ä "${text}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        delete userStates[chatId];
        return;
      }

      // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
      const totalPages = Math.ceil(results.length / ITEMS_PER_PAGE_MARKUP);
      const currentPage = 0; // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

      const startIndex = currentPage * ITEMS_PER_PAGE_MARKUP;
      const endIndex = startIndex + ITEMS_PER_PAGE_MARKUP;
      const currentProducts = results.slice(startIndex, endIndex);

      const inlineKeyboard = new InlineKeyboard();
      
      currentProducts.forEach(result => {
        inlineKeyboard.text(result.name, `select_product_for_order_${result.id}`).row(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID —Ç–æ–≤–∞—Ä–∞
      });

      if (totalPages > 1) {
        if (currentPage > 0) {
          inlineKeyboard.text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", `order_search_page_${currentPage - 1}`);
        }
        if (currentPage < totalPages - 1) {
          inlineKeyboard.text("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", `order_search_page_${currentPage + 1}`);
        }
      }

      sendMessage(ctx, `–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π (—Å—Ç—Ä. ${currentPage + 1}/${totalPages}):`, {
        reply_markup: inlineKeyboard,
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      userStates[chatId] = {
        state: "selecting_product_for_order",
        searchResults: results,
        currentPage,
      };
    },

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –Ω–∞—Ü–µ–Ω–∫–∏
    entering_markup_percentage: () => calculateMarkup(chatId, text, state, ctx),

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –§–ò–û
    entering_fio: () => {
      userStates[chatId].fio = text;
      userStates[chatId].state = "selecting_shop";

      const inlineKeyboard = new InlineKeyboard()
        .text("–ú–∞–≥–∞–∑–∏–Ω 1", "shop_–ú–∞–≥–∞–∑–∏–Ω 1")
        .text("–ú–∞–≥–∞–∑–∏–Ω 2", "shop_–ú–∞–≥–∞–∑–∏–Ω 2");

      sendMessage(ctx, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω:", {
        reply_markup: inlineKeyboard,
      });
    },

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    entering_comment: () => {
      userStates[chatId].comment = text;
      sendOrderToGroup(chatId, userStates[chatId], ctx);
    },
  };

  if (actions[state.state]) {
    await actions[state.state]();
    return;
  }

  delete userStates[chatId];
  sendMessage(ctx, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞—Ü–µ–Ω–∫–∏
const calculateMarkup = async (chatId, markupText, state, ctx) => {
  const markup = parseFloat(markupText);
  if (isNaN(markup) || markup < 0) {
    sendMessage(ctx, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –Ω–∞—Ü–µ–Ω–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10).");
    return;
  }

  const { selectedProduct } = state;
  const newPrice = selectedProduct.price * (1 + markup / 100);

  sendMessage(
    ctx,
    `–¢–æ–≤–∞—Ä: ${selectedProduct.name}\n` +
    `–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: ${selectedProduct.price} ‚ÇΩ\n` +
    `–ù–∞—Ü–µ–Ω–∫–∞: ${markup}%\n` +
    `–ù–æ–≤–∞—è —Ü–µ–Ω–∞: ${newPrice.toFixed(2)} ‚ÇΩ`
  );

  delete userStates[chatId];
};

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
const toggleSubscription = (chatId, isSubscribing) => {
  isSubscribing ? subscribers.add(chatId) : subscribers.delete(chatId);
  bot.api.sendMessage(chatId, isSubscribing ? "–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è." : "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.");
};

const exportToExcel = async (chatId, products, ctx) => {
  try {
    const data = [];
    Object.entries(products).forEach(([category, items]) => {
      items.forEach(item => {
        data.push({
          –ö–∞—Ç–µ–≥–æ—Ä–∏—è: category,
          –¢–æ–≤–∞—Ä: item.name,
          –¶–µ–Ω–∞: item.price,
        });
      });
    });

    const worksheet = XLSX.utils.json_to_sheet(data);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "–¢–æ–≤–∞—Ä—ã");

    const filename = "products.xlsx";
    XLSX.writeFile(workbook, filename);

    await ctx.replyWithDocument(new InputFile(filename), {
      caption: "–í–∞—à —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –≥–æ—Ç–æ–≤!",
    });

    fs.unlinkSync(filename);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –≤ Excel:", error);
    sendMessage(ctx, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
};

const handlePriceChanges = async (chatId, products, ctx) => {
  try {
    if (!previousProducts || Object.keys(previousProducts).length === 0) {
      previousProducts = products;
      sendMessage(ctx, "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –ø–æ–∫–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.");
      return;
    }

    let changesDetected = false;
    let message = "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω:\n\n";

    Object.entries(products).forEach(([category, items]) => {
      items.forEach(item => {
        const previousItem = previousProducts[category]?.find(prevItem => prevItem.name === item.name);
        if (previousItem && previousItem.price !== item.price) {
          changesDetected = true;
          message += `*${item.name}*:\n`;
          message += `- –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: ${previousItem.price} ‚ÇΩ\n`;
          message += `- –ù–æ–≤–∞—è —Ü–µ–Ω–∞: ${item.price} ‚ÇΩ\n\n`;
        }
      });
    });

    if (!changesDetected) {
      sendMessage(ctx, "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.");
    } else {
      const threadId = -1002301146731;
      await bot.api.sendMessage(GROUP_ID, message, {
        message_thread_id: threadId,
        parse_mode: "Markdown",
      });

      sendMarkdown(ctx, message);
    }

    previousProducts = products;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω:", error);
    sendMessage(ctx, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
};

const sendOrderToGroup = async (chatId, state, ctx) => {
  const { selectedProduct, paymentMethod, fio, shop, comment } = state;

  const orderMessage = 
`1. –¢–æ–≤–∞—Ä: ${selectedProduct.name}
–¶–µ–Ω–∞: ${selectedProduct.price} ‚ÇΩ
–û–ø–ª–∞—Ç–∞: ${paymentMethod}
–§–ò–û: ${fio}
–ú–∞–≥–∞–∑–∏–Ω: ${shop}
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}`;

  try {
    await bot.api.sendMessage(GROUP_ID, orderMessage);
    sendMessage(ctx, "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É.");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ –≤ –≥—Ä—É–ø–ø—É:", error);
    sendMessage(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
  } finally {
    delete userStates[chatId];
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err) => {
  console.error("–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:", err);
});



bot.start();

export { bot };